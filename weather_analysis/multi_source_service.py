"""
–ú—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ v2.0
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö

–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
    1. NASA POWER - –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1.0)
    2. Open-Meteo Enhanced - –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 0.9)
    3. GES DISC - –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1.0)
    4. CPTEC - –≥—Ä–æ–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –Æ–∂. –ê–º–µ—Ä–∏–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 0.8)
    5. Open-Meteo - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 0.85)

–ö–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–Ω–∞–ª–∏–∑:
    - –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ >20% –æ—Ç –º–µ–¥–∏–∞–Ω—ã)
    - –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (agreement level 0-1)
    - –û—Ü–µ–Ω–∫–∞ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
from datetime import datetime
import concurrent.futures
from weather_analysis.config import WeatherConfig
from weather_analysis.data_service import WeatherDataService, OpenMeteoAPI
from weather_analysis.data_adapters import GESDISCAdapter, CPTECAdapter, OpenMeteoEnhancedAdapter


class MultiSourceDataService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    """
    
    def __init__(self, cache_dir: str = "data/cache"):
        self.cache_dir = cache_dir
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.sources = {
            'nasa_power': WeatherDataService(preferred_source='nasa', cache_dir=cache_dir),
            'openmeteo': OpenMeteoAPI(cache_dir=cache_dir),
            'openmeteo_enhanced': OpenMeteoEnhancedAdapter(cache_dir=cache_dir),
            'ges_disc': GESDISCAdapter(cache_dir=cache_dir),
            'cptec': CPTECAdapter(cache_dir=cache_dir),
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.source_weights = {
            'nasa_power': 1.0,      # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'ges_disc': 1.0,         # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            'openmeteo_enhanced': 0.9,
            'openmeteo': 0.85,
            'cptec': 0.8,
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.parameter_sources = {
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (NASA + Open-Meteo)
            'temperature': ['nasa_power', 'openmeteo', 'openmeteo_enhanced'],
            'precipitation': ['nasa_power', 'openmeteo'],
            'wind_speed': ['nasa_power', 'openmeteo'],
            'humidity': ['nasa_power', 'openmeteo'],
            'pressure': ['nasa_power', 'openmeteo'],
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Open-Meteo
            'apparent_temperature': ['openmeteo_enhanced'],
            'weathercode': ['openmeteo_enhanced'],
            'windgusts': ['openmeteo_enhanced'],
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ (GES DISC)
            'air_quality': ['ges_disc'],
            'black_carbon': ['ges_disc'],
            'dust': ['ges_disc'],
            
            # –ì—Ä–æ–∑–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (CPTEC)
            'thunderstorm_risk': ['cptec'],
        }
        
        self.config = WeatherConfig()
    
    def fetch_multi_source_data(self, latitude: float, longitude: float,
                                start_date: str, end_date: str,
                                parameters: List[str]) -> Dict[str, pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            latitude: –®–∏—Ä–æ—Ç–∞
            longitude: –î–æ–ª–≥–æ—Ç–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            parameters: –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {–∏—Å—Ç–æ—á–Ω–∏–∫: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏}
        """
        results = {}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω—É–∂–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        sources_needed = set()
        for param in parameters:
            if param in self.parameter_sources:
                sources_needed.update(self.parameter_sources[param])
        
        print(f"\nüåê –ú–£–õ–¨–¢–ò–°–û–†–°–ù–´–ô –†–ï–ñ–ò–ú")
        print(f"{'='*60}")
        print(f"üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(sources_needed)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:")
        for source in sources_needed:
            print(f"   ‚Ä¢ {source.upper().replace('_', ' ')}")
        print(f"{'='*60}\n")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            future_to_source = {}
            
            for source_name in sources_needed:
                if source_name not in self.sources:
                    continue
                
                source = self.sources[source_name]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —É —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                source_params = [p for p in parameters if source_name in self.parameter_sources.get(p, [])]
                
                if source_params:
                    future = executor.submit(
                        self._fetch_from_source,
                        source, source_name, latitude, longitude,
                        start_date, end_date, source_params
                    )
                    future_to_source[future] = source_name
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
            for future in concurrent.futures.as_completed(future_to_source):
                source_name = future_to_source[future]
                try:
                    data = future.result()
                    if data is not None and not data.empty:
                        results[source_name] = data
                        print(f"   ‚úÖ {source_name.upper().replace('_', ' ')}: –ø–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    else:
                        print(f"   ‚ö†Ô∏è  {source_name.upper().replace('_', ' ')}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                except Exception as e:
                    print(f"   ‚ùå {source_name.upper().replace('_', ' ')}: –æ—à–∏–±–∫–∞ - {str(e)[:50]}")
        
        print(f"\n{'='*60}")
        print(f"‚úì –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {len(results)}/{len(sources_needed)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
        print(f"{'='*60}\n")
        
        return results
    
    def _fetch_from_source(self, source, source_name: str,
                          latitude: float, longitude: float,
                          start_date: str, end_date: str,
                          parameters: List[str]) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        """
        try:
            if source_name == 'nasa_power':
                # NASA POWER –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_data —Å –≥–æ–¥–∞–º–∏
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –≥–æ–¥—ã
                start_year = int(start_date.split('-')[0])
                end_year = int(end_date.split('-')[0])
                
                data, source_info = source.get_data(
                    latitude=latitude,
                    longitude=longitude,
                    start_year=start_year,
                    end_year=end_year,
                    use_interpolation=True
                )
                return data
                
            elif source_name == 'openmeteo':
                # Open-Meteo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç get_historical_data —Å –≥–æ–¥–∞–º–∏
                start_year = int(start_date.split('-')[0])
                end_year = int(end_date.split('-')[0])
                
                data = source.get_historical_data(
                    latitude=latitude,
                    longitude=longitude,
                    start_year=start_year,
                    end_year=end_year
                )
                return data
            else:
                # –ê–¥–∞–ø—Ç–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                return source.fetch_data(
                    latitude=latitude,
                    longitude=longitude,
                    start_date=start_date,
                    end_date=end_date,
                    parameters=parameters
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ {source_name}: {e}")
            return None
    
    def calculate_consensus(self, multi_source_data: Dict[str, pd.DataFrame],
                           parameter: str) -> Dict:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            multi_source_data: –°–ª–æ–≤–∞—Ä—å {–∏—Å—Ç–æ—á–Ω–∏–∫: DataFrame}
            parameter: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        
        # –°–æ–±–∏—Ä–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        values_by_source = {}
        
        for source_name, df in multi_source_data.items():
            # –ò—â–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ DataFrame
            param_col = self._find_parameter_column(df, parameter)
            
            if param_col is not None and param_col in df.columns:
                values_by_source[source_name] = df[param_col].dropna()
        
        if not values_by_source:
            return {
                'value': None,
                'confidence': 'none',
                'sources_used': [],
                'agreement_level': 0.0
            }
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        weighted_values = []
        weights = []
        sources_used = []
        
        for source_name, values in values_by_source.items():
            if len(values) > 0:
                weight = self.source_weights.get(source_name, 0.5)
                weighted_values.append(values.mean() * weight)
                weights.append(weight)
                sources_used.append(source_name)
        
        if not weighted_values:
            return {
                'value': None,
                'confidence': 'none',
                'sources_used': [],
                'agreement_level': 0.0
            }
        
        # –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        consensus_value = sum(weighted_values) / sum(weights)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_values = [values.mean() for values in values_by_source.values()]
        agreement_level = self._calculate_agreement(all_values)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
        confidence = self._determine_confidence(len(sources_used), agreement_level)
        
        # –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        std_dev = np.std(all_values) if len(all_values) > 1 else 0
        confidence_interval = (
            consensus_value - 1.96 * std_dev,
            consensus_value + 1.96 * std_dev
        )
        
        return {
            'value': float(consensus_value),
            'confidence': confidence,
            'confidence_interval': confidence_interval,
            'sources_used': sources_used,
            'agreement_level': float(agreement_level),
            'source_values': {src: float(values.mean()) 
                            for src, values in values_by_source.items()},
            'std_deviation': float(std_dev)
        }
    
    def _find_parameter_column(self, df: pd.DataFrame, parameter: str) -> Optional[str]:
        """
        –ù–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤ DataFrame
        –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
        """
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
        variants = {
            'temperature': ['T2M', 'temperature_2m', 'temperature_2m_mean', 'temp'],
            'apparent_temperature': ['apparent_temperature', 'apparent_temperature_mean', 'feels_like'],
            'precipitation': ['PRECTOTCORR', 'precipitation_sum', 'precip', 'rain'],
            'wind_speed': ['WS2M', 'WS10M', 'windspeed_10m_max', 'wind'],
            'windgusts': ['windgusts_10m_max', 'wind_gusts', 'gusts'],
            'humidity': ['RH2M', 'relativehumidity_2m_mean', 'humidity'],
            'pressure': ['PS', 'surface_pressure_mean', 'pressure'],
            'weathercode': ['weathercode', 'weather_code'],
            'air_quality': ['AODANA', 'aod', 'air_quality_index'],
            'black_carbon': ['BCSMASS', 'black_carbon', 'bc'],
            'dust': ['DUSMASS', 'dust', 'dust_concentration'],
            'thunderstorm_risk': ['cape', 'CAPE', 'convective_energy'],
        }
        
        if parameter in variants:
            for variant in variants[parameter]:
                if variant in df.columns:
                    return variant
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if parameter in df.columns:
            return parameter
        
        return None
    
    def _calculate_agreement(self, values: List[float]) -> float:
        """
        –í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (0-1)
        1.0 = –ø–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ, 0.0 = —Å–∏–ª—å–Ω–æ–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        """
        if len(values) < 2:
            return 1.0
        
        mean_val = np.mean(values)
        if mean_val == 0: # handle division by zero for zero mean values
            return 1.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
        std_val = np.std(values)
        cv = std_val / abs(mean_val)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É—Ä–æ–≤–µ–Ω—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (0-1)
        # CV < 0.1 => —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å ~1.0
        # CV > 0.5 => —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å ~0.0
        agreement = np.exp(-2 * cv)
        
        return float(agreement)
    
    def _determine_confidence(self, num_sources: int, agreement_level: float) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
        """
        if num_sources >= 3 and agreement_level > 0.90:
            return 'high'
        elif num_sources >= 2 and agreement_level > 0.75:
            return 'medium'
        elif num_sources >= 1 and agreement_level > 0.50:
            return 'low'
        else:
            return 'very_low'
    
    def get_enhanced_weather_data(self, latitude: float, longitude: float,
                                  month: int, day: int,
                                  use_consensus: bool = True) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —Å –º—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        
        Args:
            latitude: –®–∏—Ä–æ—Ç–∞
            longitude: –î–æ–ª–≥–æ—Ç–∞
            month: –ú–µ—Å—è—Ü (1-12)
            day: –î–µ–Ω—å (1-31)
            use_consensus: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–Ω–∞–ª–∏–∑
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –æ –∫–∞—á–µ—Å—Ç–≤–µ
        """
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        base_parameters = ['temperature', 'precipitation', 'wind_speed', 'humidity']
        enhanced_parameters = ['apparent_temperature', 'weathercode', 'windgusts']
        air_quality_parameters = ['air_quality', 'black_carbon', 'dust']
        storm_parameters = ['thunderstorm_risk']
        
        all_parameters = base_parameters + enhanced_parameters + air_quality_parameters + storm_parameters
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –ª–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è)
        current_year = datetime.now().year
        start_year = current_year - 30
        
        # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ª–µ—Ç
        start_date = f"{start_year}-{month:02d}-{day:02d}"
        end_date = f"{current_year-1}-{month:02d}-{day:02d}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        multi_source_data = self.fetch_multi_source_data(
            latitude, longitude, start_date, end_date, all_parameters
        )
        
        if not multi_source_data:
            return {
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞',
                'sources_attempted': list(self.sources.keys())
            }
        
        result = {
            'location': {'latitude': latitude, 'longitude': longitude},
            'date': {'month': month, 'day': day},
            'data_sources': list(multi_source_data.keys()),
            'parameters': {}
        }
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω—Å–µ–Ω—Å—É—Å
        if use_consensus:
            for param in all_parameters:
                consensus = self.calculate_consensus(multi_source_data, param)
                if consensus['value'] is not None:
                    result['parameters'][param] = consensus
        else:
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            primary_source = 'nasa_power' if 'nasa_power' in multi_source_data else list(multi_source_data.keys())[0]
            result['primary_source'] = primary_source
            result['raw_data'] = multi_source_data
        
        return result


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
multi_source_service = MultiSourceDataService()
