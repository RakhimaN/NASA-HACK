"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç NASA POWER API –∏ Open-Meteo (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
"""

import requests
import pandas as pd
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional, Tuple
import hashlib
from .mock_data import MockWeatherDataSource


class WeatherDataSource:
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    
    def get_historical_data(self, latitude: float, longitude: float, 
                           start_year: int, end_year: int) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏"""
        raise NotImplementedError


class NASAPowerAPI(WeatherDataSource):
    """
    –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö NASA POWER API
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://power.larc.nasa.gov/docs/
    """
    
    def __init__(self, cache_dir: str = "./data/cache"):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º daily endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º
        self.base_url = "https://power.larc.nasa.gov/api/temporal/daily/point"
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        
    def _get_cache_key(self, latitude: float, longitude: float, 
                       start_year: int, end_year: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫—ç—à–∞"""
        key_str = f"{latitude}_{longitude}_{start_year}_{end_year}"
        return hashlib.md5(key_str.encode()).hexdigest()
    
    def _get_from_cache(self, cache_key: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ –µ—Å–ª–∏ –µ—Å—Ç—å"""
        cache_file = self.cache_dir / f"{cache_key}.parquet"
        
        if cache_file.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫—ç—à–∞
            file_age = datetime.now() - datetime.fromtimestamp(cache_file.stat().st_mtime)
            if file_age.days < 30:  # –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –¥–Ω–µ–π
                try:
                    return pd.read_parquet(cache_file)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        return None
    
    def _save_to_cache(self, cache_key: str, data: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        cache_file = self.cache_dir / f"{cache_key}.parquet"
        try:
            data.to_parquet(cache_file)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
    
    def get_historical_data(self, latitude: float, longitude: float,
                           start_year: int = 1990, end_year: int = 2023) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç NASA POWER
        
        Args:
            latitude: –®–∏—Ä–æ—Ç–∞ (-90 –¥–æ 90)
            longitude: –î–æ–ª–≥–æ—Ç–∞ (-180 –¥–æ 180)
            start_year: –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
            end_year: –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–Ω—è–º –≥–æ–¥–∞ (1-365)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(latitude, longitude, start_year, end_year)
        cached_data = self._get_from_cache(cache_key)
        
        if cached_data is not None:
            print(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            return cached_data
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        parameters = "T2M,T2M_MAX,T2M_MIN,T2MDEW,PRECTOTCORR,WS2M,WS10M,RH2M,PS,CLOUD_AMT,ALLSKY_SFC_SW_DWN,ALLSKY_SFC_UV_INDEX,QV2M,SNODP"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è daily –¥–∞–Ω–Ω—ã—Ö
        url = (
            f"{self.base_url}"
            f"?parameters={parameters}"
            f"&community=RE"
            f"&longitude={longitude}"
            f"&latitude={latitude}"
            f"&start={start_year}0101"
            f"&end={end_year}1231"
            f"&format=JSON"
        )
        
        print(f"üåç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç NASA POWER API...")
        print(f"   –õ–æ–∫–∞—Ü–∏—è: ({latitude}, {longitude})")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_year}-{end_year}")
        
        try:
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            data = response.json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = self._process_nasa_data(data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self._save_to_cache(cache_key, df)
            
            print(f"‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã ({len(df)} –¥–Ω–µ–π)")
            return df
            
        except requests.exceptions.Timeout:
            raise Exception("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NASA API")
        except requests.exceptions.RequestException as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NASA API: {e}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _process_nasa_data(self, raw_data: dict) -> pd.DataFrame:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç NASA –≤ DataFrame"""
        try:
            parameters = raw_data['properties']['parameter']
            
            # NASA daily API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {YYYYMMDD: value}
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –æ–¥–∏–Ω DataFrame
            
            all_records = {}
            
            for param_name, param_values in parameters.items():
                for date_str, value in param_values.items():
                    if value == -999.0:  # NASA fill value –¥–ª—è missing data
                        continue
                    
                    if date_str not in all_records:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                        year = int(date_str[:4])
                        month = int(date_str[4:6])
                        day = int(date_str[6:8])
                        
                        date = pd.Timestamp(year=year, month=month, day=day)
                        
                        all_records[date_str] = {
                            'date': date,
                            'year': year,
                            'day_of_year': date.dayofyear
                        }
                    
                    all_records[date_str][param_name] = value
            
            # –°–æ–∑–¥–∞–µ–º DataFrame - –°–û–•–†–ê–ù–Ø–ï–ú –≤—Å–µ –≥–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            df = pd.DataFrame(list(all_records.values()))
            
            return df
            
        except KeyError as e:
            raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç NASA: {e}")
    
    def interpolate_point(self, latitude: float, longitude: float,
                         start_year: int = 1990, end_year: int = 2023) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–ª–∏–Ω–µ–π–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –º–µ–∂–¥—É 4 –±–ª–∏–∂–∞–π—à–∏–º–∏ —Ç–æ—á–∫–∞–º–∏ —Å–µ—Ç–∫–∏
        
        Args:
            latitude: –¢–æ—á–Ω–∞—è —à–∏—Ä–æ—Ç–∞
            longitude: –¢–æ—á–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞
            start_year: –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
            end_year: –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
            
        Returns:
            DataFrame —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        # NASA —Å–µ—Ç–∫–∞ 0.5¬∞ √ó 0.5¬∞
        grid_size = 0.5
        
        # –ù–∞—Ö–æ–¥–∏–º 4 –±–ª–∏–∂–∞–π—à–∏–µ —Ç–æ—á–∫–∏ —Å–µ—Ç–∫–∏
        lat_low = (latitude // grid_size) * grid_size
        lat_high = lat_low + grid_size
        lon_low = (longitude // grid_size) * grid_size
        lon_high = lon_low + grid_size
        
        # 4 —É–≥–ª–æ–≤—ã–µ —Ç–æ—á–∫–∏
        corners = [
            (lat_low, lon_low),    # –Æ–≥–æ-–∑–∞–ø–∞–¥
            (lat_low, lon_high),   # –Æ–≥–æ-–≤–æ—Å—Ç–æ–∫
            (lat_high, lon_low),   # –°–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
            (lat_high, lon_high)   # –°–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
        ]
        
        print(f"üîç –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –¥–ª—è —Ç–æ—á–∫–∏ ({latitude:.4f}, {longitude:.4f})")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 —Ç–æ—á–∫–∏ —Å–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥:")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö 4 —Ç–æ—á–µ–∫
        corner_data = []
        weights = []
        
        for i, (lat, lon) in enumerate(corners):
            try:
                data = self.get_historical_data(lat, lon, start_year, end_year)
                corner_data.append(data)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                distance = ((latitude - lat)**2 + (longitude - lon)**2)**0.5
                weight = 1.0 / (distance + 0.001)  # +0.001 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
                weights.append(weight)
                
                print(f"   ‚úì –¢–æ—á–∫–∞ {i+1}: ({lat:.2f}, {lon:.2f}), –≤–µ—Å={weight:.3f}")
                
            except Exception as e:
                print(f"   ‚ö† –û—à–∏–±–∫–∞ –¥–ª—è —Ç–æ—á–∫–∏ ({lat}, {lon}): {e}")
                continue
        
        if not corner_data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ —Å–µ—Ç–∫–∏")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞
        total_weight = sum(weights)
        weights = [w / total_weight for w in weights]
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
        print(f"   üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é...")
        
        # –ë–µ—Ä–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
        result = corner_data[0].copy()
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        numeric_columns = result.select_dtypes(include=['float64', 'int64']).columns
        numeric_columns = [col for col in numeric_columns if col not in ['year', 'day_of_year']]
        
        for col in numeric_columns:
            weighted_sum = sum(df[col] * weight for df, weight in zip(corner_data, weights))
            result[col] = weighted_sum
        
        print(f"   ‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return result


class OpenMeteoAPI(WeatherDataSource):
    """
    –ó–∞–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö Open-Meteo
    –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://open-meteo.com/
    """
    
    def __init__(self, cache_dir: str = "./data/cache"):
        self.base_url = "https://archive-api.open-meteo.com/v1/archive"
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(parents=True, exist_ok=True)
    
    def get_historical_data(self, latitude: float, longitude: float,
                           start_year: int = 1990, end_year: int = 2023) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Open-Meteo
        
        Note: Open-Meteo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º, –∞ –Ω–µ –∫–ª–∏–º–∞—Ç–æ–ª–æ–≥–∏—é
        –ù—É–∂–Ω–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–Ω—è–º –≥–æ–¥–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
        import hashlib
        cache_key = hashlib.md5(
            f"openmeteo_{latitude}_{longitude}_{start_year}_{end_year}".encode()
        ).hexdigest()
        cache_file = self.cache_dir / f"{cache_key}.parquet"
        
        if cache_file.exists():
            try:
                df = pd.read_parquet(cache_file)
                print(f"‚úì Open-Meteo: –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
                return df
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        print(f"üåç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ—Ç Open-Meteo API...")
        print(f"   –õ–æ–∫–∞—Ü–∏—è: ({latitude}, {longitude})")
        print(f"   –ü–µ—Ä–∏–æ–¥: {start_year}-{end_year}")
        
        all_data = []
        
        # Open-Meteo –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ –≥–æ–¥–∞–º
        # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
        import time
        
        for year in range(start_year, end_year + 1):
            start_date = f"{year}-01-01"
            end_date = f"{year}-12-31"
            
            params = {
                'latitude': latitude,
                'longitude': longitude,
                'start_date': start_date,
                'end_date': end_date,
                'daily': 'temperature_2m_max,temperature_2m_min,temperature_2m_mean,'
                        'precipitation_sum,wind_speed_10m_max,relative_humidity_2m_mean',
                'timezone': 'auto'
            }
            
            try:
                response = requests.get(self.base_url, params=params, timeout=30)
                response.raise_for_status()
                data = response.json()
                
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                daily = data['daily']
                df_year = pd.DataFrame({
                    'date': pd.to_datetime(daily['time']),
                    'T2M_MAX': daily['temperature_2m_max'],
                    'T2M_MIN': daily['temperature_2m_min'],
                    'T2M': daily['temperature_2m_mean'],
                    'PRECTOTCORR': daily['precipitation_sum'],
                    'WS2M': daily['wind_speed_10m_max'],
                    'RH2M': daily['relative_humidity_2m_mean']
                })
                
                all_data.append(df_year)
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ 0.2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (max 5 req/sec –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞)
                time.sleep(0.2)
                
            except requests.exceptions.HTTPError as e:
                if '429' in str(e):
                    print(f"‚ö† Rate limit –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –Ω–∞ –≥–æ–¥—É {year}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    break
                else:
                    print(f"‚ö† –û—à–∏–±–∫–∞ –¥–ª—è {year}: {e}")
                    continue
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –¥–ª—è {year}: {e}")
                continue
        
        if not all_data:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Open-Meteo")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –≥–æ–¥—ã - –ù–ï –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        df = pd.concat(all_data, ignore_index=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≥–æ–¥–∞ –∏ –≥–æ–¥
        df['day_of_year'] = df['date'].dt.dayofyear
        df['year'] = df['date'].dt.year
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        try:
            df.to_parquet(cache_file)
            print(f"‚úì Open-Meteo: –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        
        print(f"‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        return df


class WeatherDataService:
    """
    –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    """
    
    def __init__(self, preferred_source: str = 'nasa', cache_dir: str = "./data/cache", 
                 use_mock: bool = False):
        """
        Args:
            preferred_source: 'nasa', 'openmeteo', –∏–ª–∏ 'mock'
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞
            use_mock: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.cache_dir = cache_dir
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.nasa = NASAPowerAPI(cache_dir=cache_dir)
        self.openmeteo = OpenMeteoAPI(cache_dir=cache_dir)
        self.mock = MockWeatherDataSource(cache_dir=cache_dir)
        
        self.preferred_source = preferred_source
        self.use_mock = use_mock
    
    def get_data(self, latitude: float, longitude: float,
                 start_year: int = 1990, end_year: int = 2023,
                 use_interpolation: bool = True) -> Tuple[pd.DataFrame, str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NASA, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - Open-Meteo, –µ—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è - Mock)
        
        Args:
            latitude: –®–∏—Ä–æ—Ç–∞
            longitude: –î–æ–ª–≥–æ—Ç–∞
            start_year: –ù–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥
            end_year: –ö–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥
            use_interpolation: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        
        Returns:
            Tuple[DataFrame, –∏—Å—Ç–æ—á–Ω–∏–∫_–¥–∞–Ω–Ω—ã—Ö]
        """
        # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock
        if self.use_mock or self.preferred_source == 'mock':
            data = self.mock.get_historical_data(latitude, longitude, start_year, end_year)
            return data, 'Mock Data (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)'
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        if self.preferred_source == 'nasa':
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ~100–º
                if use_interpolation:
                    data = self.nasa.interpolate_point(latitude, longitude, start_year, end_year)
                    return data, 'NASA POWER API (–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è)'
                else:
                    data = self.nasa.get_historical_data(latitude, longitude, start_year, end_year)
                    return data, 'NASA POWER API'
            except Exception as e:
                print(f"‚ö† NASA API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Open-Meteo...")
                
                try:
                    data = self.openmeteo.get_historical_data(latitude, longitude, start_year, end_year)
                    return data, 'Open-Meteo API'
                except Exception as e2:
                    print(f"‚ö† Open-Meteo —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")
                    print(f"üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    data = self.mock.get_historical_data(latitude, longitude, start_year, end_year)
                    return data, 'Mock Data (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)'
        
        else:  # openmeteo
            try:
                data = self.openmeteo.get_historical_data(latitude, longitude, start_year, end_year)
                return data, 'Open-Meteo API'
            except Exception as e:
                print(f"‚ö† Open-Meteo –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ NASA...")
                
                try:
                    if use_interpolation:
                        data = self.nasa.interpolate_point(latitude, longitude, start_year, end_year)
                        return data, 'NASA POWER API (–∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è)'
                    else:
                        data = self.nasa.get_historical_data(latitude, longitude, start_year, end_year)
                        return data, 'NASA POWER API'
                except Exception as e2:
                    print(f"‚ö† NASA —Ç–∞–∫–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e2}")
                    print(f"üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                    data = self.mock.get_historical_data(latitude, longitude, start_year, end_year)
                    return data, 'Mock Data (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)'
    
    def test_connection(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        results = {}
        
        # –¢–µ—Å—Ç NASA
        try:
            test_data = self.nasa.get_historical_data(55.7558, 37.6173, 2020, 2021)
            results['NASA'] = True
        except:
            results['NASA'] = False
        
        # –¢–µ—Å—Ç Open-Meteo
        try:
            test_data = self.openmeteo.get_historical_data(55.7558, 37.6173, 2020, 2021)
            results['OpenMeteo'] = True
        except:
            results['OpenMeteo'] = False
        
        return results
