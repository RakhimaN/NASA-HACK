"""
Weather Analysis Module - NASA Hackathon Project v2.0

–ú–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

üÜï v2.0 Features:
    - –ú—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (4 –∏—Å—Ç–æ—á–Ω–∏–∫–∞: NASA POWER, Open-Meteo Enhanced, GES DISC, CPTEC)
    - –ö–æ–Ω—Å–µ–Ω—Å—É—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –æ—Ü–µ–Ω–∫–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    - 7 –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: –æ—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞, –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞, –∫–æ–¥—ã –ø–æ–≥–æ–¥—ã, —Ä–∏—Å–∫ –≥—Ä–æ–∑—ã
    - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (22 –Ω–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
    - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ (~100–º)

–û—Å–Ω–æ–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from weather_analysis import analyze_weather
    
    # –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º (NASA POWER)
    result = analyze_weather(
        latitude=55.7558,
        longitude=37.6173,
        date='2024-06-15'
    )
    
    # –ú—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π —Ä–µ–∂–∏–º (–≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ + –∫–æ–Ω—Å–µ–Ω—Å—É—Å)
    result = analyze_weather(
        latitude=55.7558,
        longitude=37.6173,
        date='2024-06-15',
        use_multi_source=True
    )
"""

__version__ = '2.0.0'
__author__ = 'NASA Hackathon Team'

from .data_service import WeatherDataService
from .statistical_analyzer import StatisticalAnalyzer
from .config import WeatherConfig
from .multi_source_service import MultiSourceDataService
from .utils import (date_to_day_of_year, format_probability, get_probability_description,
                    convert_result_units)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π
def analyze_weather(latitude: float, 
                   longitude: float, 
                   date: str,
                   data_source: str = 'nasa',
                   years_range: tuple = (1990, 2023),
                   detailed: bool = False,
                   units: dict = None,
                   use_multi_source: bool = False) -> dict:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞ (-90 –¥–æ 90)
        longitude: –î–æ–ª–≥–æ—Ç–∞ (-180 –¥–æ 180)
        date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        data_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('nasa' –∏–ª–∏ 'openmeteo')
        years_range: –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (start, end)
        detailed: –í–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ —Ç–æ–ª—å–∫–æ summary
        units: –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è {'temperature': 'fahrenheit', 'wind': 'mph', ...}
        use_multi_source: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (NASA + Open-Meteo + GES DISC + CPTEC)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:
        {
            'location': {'latitude': ..., 'longitude': ...},
            'date': '2024-06-15',
            'day_of_year': 167,
            'data_sources': ['NASA POWER', 'Open-Meteo'] (–µ—Å–ª–∏ use_multi_source=True),
            'probabilities': {
                'very_hot': 0.25,
                'very_cold': 0.05,
                ...
            },
            'statistics': {
                'temperature': {...},
                'precipitation': {...},
                ...
            },
            'metadata': {
                'data_source': 'NASA POWER API',
                'years_analyzed': '1990-2023',
                'data_points': 30
            }
        }
    
    Example:
        >>> result = analyze_weather(55.7558, 37.6173, '2024-06-15')
        >>> print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ–π –ø–æ–≥–æ–¥—ã: {result['probabilities']['very_hot']*100:.1f}%")
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not (-90 <= latitude <= 90):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —à–∏—Ä–æ—Ç–∞: {latitude}. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90")
    
    if not (-180 <= longitude <= 180):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–æ–ª–≥–æ—Ç–∞: {longitude}. –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –¥–µ–Ω—å –≥–æ–¥–∞
    day_of_year = date_to_day_of_year(date)
    
    print(f"\n{'='*60}")
    print(f"üåç –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–ù–´–• –£–°–õ–û–í–ò–ô")
    print(f"{'='*60}")
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: ({latitude}, {longitude})")
    print(f"üìÖ –î–∞—Ç–∞: {date} (–¥–µ–Ω—å {day_of_year})")
    print(f"üìä –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {years_range[0]}-{years_range[1]}")
    if use_multi_source:
        print(f"üî¨ –†–µ–∂–∏–º: –ú–£–õ–¨–¢–ò–°–û–†–°–ù–´–ô (NASA + Open-Meteo + GES DISC + CPTEC)")
    print(f"{'='*60}\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if use_multi_source:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        multi_service = MultiSourceDataService()
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            import datetime
            date_obj = datetime.datetime.strptime(date, '%Y-%m-%d')
            start_date = f"{years_range[0]}-{date_obj.month:02d}-{date_obj.day:02d}"
            end_date = f"{years_range[1]}-{date_obj.month:02d}-{date_obj.day:02d}"
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            multi_data = multi_service.fetch_multi_source_data(
                latitude, longitude,
                start_date, end_date,
                parameters=['temperature', 'precipitation', 'wind_speed', 'humidity',
                           'apparent_temperature', 'weathercode', 'windgusts',
                           'air_quality', 'black_carbon', 'dust', 'thunderstorm_risk']
            )
            
            print(f"‚úì –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {list(multi_data.keys())}")
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ —Å –∫–æ–Ω—Å–µ–Ω—Å—É—Å-–∞–Ω–∞–ª–∏–∑–æ–º
            if multi_data:
                historical_data = list(multi_data.values())[0]
                source = f"Multi-source: {', '.join(multi_data.keys())}"
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical_data)}\n")
            
        except Exception as e:
            return {
                'error': f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
                'location': {'latitude': latitude, 'longitude': longitude},
                'date': date
            }
    else:
        # –û–±—ã—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫
        data_service = WeatherDataService(preferred_source=data_source)
        
        try:
            historical_data, source = data_service.get_data(
                latitude, 
                longitude,
                start_year=years_range[0],
                end_year=years_range[1]
            )
            
            print(f"‚úì –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
            print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical_data)}\n")
            
        except Exception as e:
            return {
            'error': str(e),
            'location': {'latitude': latitude, 'longitude': longitude},
            'date': date
        }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    analyzer = StatisticalAnalyzer()
    
    if detailed:
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ –≤—Å–µ–º–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
        analysis_result = analyzer.analyze_day(historical_data, day_of_year, latitude)
    else:
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π summary
        analysis_result = analyzer.get_summary_probabilities(historical_data, day_of_year, latitude)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        'location': {
            'latitude': latitude,
            'longitude': longitude
        },
        'date': date,
        'day_of_year': day_of_year,
        'date_name': analysis_result.get('date_example', ''),
        'probabilities': analysis_result.get('probabilities', {}),
        'statistics': analysis_result.get('statistics', {}),
        'metadata': {
            'data_source': source,
            'years_analyzed': f"{years_range[0]}-{years_range[1]}",
            'data_points': analysis_result.get('data_points', 0),
            'analysis_type': 'detailed' if detailed else 'summary'
        }
    }
    
    # –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    _print_results(result)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if units:
        result = convert_result_units(result, units)
    
    return result


def _print_results(result: dict):
    """–ü–µ—á–∞—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å"""
    print(f"\n{'='*60}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê")
    print(f"{'='*60}\n")
    
    probs = result['probabilities']
    
    print("üå°Ô∏è  –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ï –£–°–õ–û–í–ò–Ø:")
    print(f"   ‚Ä¢ –û—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ:  {format_probability(probs.get('very_cold', 0))}")
    print(f"   ‚Ä¢ –•–æ–ª–æ–¥–Ω–æ:        {format_probability(probs.get('cold', 0))}")
    print(f"   ‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ:      {format_probability(probs.get('comfortable', 0))}")
    print(f"   ‚Ä¢ –ñ–∞—Ä–∫–æ:          {format_probability(probs.get('hot', 0))}")
    print(f"   ‚Ä¢ –û—á–µ–Ω—å –∂–∞—Ä–∫–æ:    {format_probability(probs.get('very_hot', 0))}")
    
    print("\nüíß –û–°–ê–î–ö–ò –ò –í–ï–¢–ï–†:")
    print(f"   ‚Ä¢ –û—á–µ–Ω—å –≤–ª–∞–∂–Ω–æ:   {format_probability(probs.get('very_wet', 0))}")
    print(f"   ‚Ä¢ –û—á–µ–Ω—å –≤–µ—Ç—Ä–µ–Ω–æ:  {format_probability(probs.get('very_windy', 0))}")
    
    print("\nüòä –û–ë–©–ò–ô –ö–û–ú–§–û–†–¢:")
    print(f"   ‚Ä¢ –û—á–µ–Ω—å –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ: {format_probability(probs.get('very_uncomfortable', 0))}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if 'temperature' in result['statistics']:
        temp_stats = result['statistics']['temperature']
        print(f"\nüìà –°–†–ï–î–ù–Ø–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ: {temp_stats['mean']:.1f}¬∞C")
        print(f"   ‚Ä¢ –ú–∏–Ω: {temp_stats.get('min', 'N/A') if temp_stats.get('min') else 'N/A'}")
        print(f"   ‚Ä¢ –ú–∞–∫—Å: {temp_stats.get('max', 'N/A') if temp_stats.get('max') else 'N/A'}")
    
    print(f"\n{'='*60}\n")


def analyze_weather_range(latitude: float,
                          longitude: float,
                          start_date: str,
                          end_date: str,
                          data_source: str = 'nasa',
                          years_range: tuple = (1990, 2023),
                          units: dict = None,
                          use_multi_source: bool = False) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑ –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞ (-90 –¥–æ 90)
        longitude: –î–æ–ª–≥–æ—Ç–∞ (-180 –¥–æ 180)
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        data_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö ('nasa' –∏–ª–∏ 'openmeteo')
        years_range: –î–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (start, end)
        units: –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        use_multi_source: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º—É–ª—å—Ç–∏—Å–æ—Ä—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º
    
    Example:
        >>> result = analyze_weather_range(55.7558, 37.6173, '2026-01-12', '2026-01-21')
        >>> print(f"–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ö–æ–ª–æ–¥–∞: {result['aggregated']['probabilities']['cold']*100:.1f}%")
    """
    from datetime import datetime, timedelta
    import numpy as np
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not (-90 <= latitude <= 90):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —à–∏—Ä–æ—Ç–∞: {latitude}")
    if not (-180 <= longitude <= 180):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–æ–ª–≥–æ—Ç–∞: {longitude}")
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
    start_dt = datetime.strptime(start_date, '%Y-%m-%d')
    end_dt = datetime.strptime(end_date, '%Y-%m-%d')
    
    if start_dt > end_dt:
        raise ValueError("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
    
    duration_days = (end_dt - start_dt).days + 1
    
    print(f"\n{'='*60}")
    print(f"üåç –ê–ù–ê–õ–ò–ó –ü–û–ì–û–î–ù–´–• –£–°–õ–û–í–ò–ô –ó–ê –ü–ï–†–ò–û–î")
    print(f"{'='*60}")
    print(f"üìç –õ–æ–∫–∞—Ü–∏—è: ({latitude}, {longitude})")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} ‚Üí {end_date} ({duration_days} –¥–Ω–µ–π)")
    print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: {years_range[0]}-{years_range[1]}")
    print(f"{'='*60}\n")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
    data_service = WeatherDataService(preferred_source=data_source)
    
    try:
        historical_data, source = data_service.get_data(
            latitude,
            longitude,
            start_year=years_range[0],
            end_year=years_range[1]
        )
        print(f"‚úì –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
        print(f"‚úì –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(historical_data)}\n")
    except Exception as e:
        return {
            'error': str(e),
            'location': {'latitude': latitude, 'longitude': longitude},
            'date_range': {'start': start_date, 'end': end_date}
        }
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    analyzer = StatisticalAnalyzer()
    daily_results = []
    
    current_date = start_dt
    while current_date <= end_dt:
        date_str = current_date.strftime('%Y-%m-%d')
        day_of_year = current_date.timetuple().tm_yday
        
        analysis = analyzer.analyze_day(historical_data, day_of_year, latitude)
        
        daily_results.append({
            'date': date_str,
            'day_of_year': day_of_year,
            'day_name': current_date.strftime('%A'),
            'probabilities': analysis.get('probabilities', {}),
            'statistics': analysis.get('statistics', {}),
            'data_points': analysis.get('data_points', 0)
        })
        
        current_date += timedelta(days=1)
    
    print(f"‚úì –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–Ω–µ–π: {len(daily_results)}\n")
    
    # –ê–ì–†–ï–ì–ê–¶–ò–Ø: –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
    all_probs = {}
    all_stats = {
        'temperature': [],
        'precipitation': [],
        'wind': [],
        'humidity': []
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –¥–Ω–µ–π
    for day in daily_results:
        for prob_name, prob_value in day['probabilities'].items():
            if prob_name not in all_probs:
                all_probs[prob_name] = []
            all_probs[prob_name].append(prob_value)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = day['statistics']
        if 'temperature' in stats:
            all_stats['temperature'].append(stats['temperature']['mean'])
        if 'precipitation' in stats:
            all_stats['precipitation'].append(stats['precipitation']['mean'])
        if 'wind' in stats:
            all_stats['wind'].append(stats['wind']['mean'])
        if 'humidity' in stats:
            all_stats['humidity'].append(stats['humidity']['mean'])
    
    # –°—Ä–µ–¥–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    aggregated_probs = {
        prob_name: float(np.mean(values)) if values else 0.0
        for prob_name, values in all_probs.items()
    }
    
    # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    aggregated_stats = {}
    if all_stats['temperature']:
        aggregated_stats['temperature'] = {
            'mean': float(np.mean(all_stats['temperature'])),
            'min': float(min(all_stats['temperature'])),
            'max': float(max(all_stats['temperature'])),
            'std': float(np.std(all_stats['temperature']))
        }
    if all_stats['precipitation']:
        aggregated_stats['precipitation'] = {
            'mean': float(np.mean(all_stats['precipitation'])),
            'total': float(np.sum(all_stats['precipitation'])),
            'max': float(max(all_stats['precipitation']))
        }
    if all_stats['wind']:
        aggregated_stats['wind'] = {
            'mean': float(np.mean(all_stats['wind'])),
            'max': float(max(all_stats['wind']))
        }
    if all_stats['humidity']:
        aggregated_stats['humidity'] = {
            'mean': float(np.mean(all_stats['humidity']))
        }
    
    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: –ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ –¥–Ω–∏
    best_days = {}
    
    # –õ—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ
    outdoor_scores = []
    for day in daily_results:
        probs = day['probabilities']
        bad_weather_score = (
            probs.get('very_cold', 0) * 2 +
            probs.get('very_hot', 0) * 2 +
            probs.get('very_wet', 0) * 3 +
            probs.get('very_windy', 0) * 1.5 +
            probs.get('very_uncomfortable', 0) * 2
        )
        outdoor_scores.append(bad_weather_score)
    
    best_outdoor_idx = int(np.argmin(outdoor_scores))
    best_days['outdoor_activity'] = daily_results[best_outdoor_idx]['date']
    
    # –î–µ–Ω—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –æ—Å–∞–¥–∫–æ–≤
    rain_scores = [day['probabilities'].get('very_wet', 0) for day in daily_results]
    best_dry_idx = int(np.argmin(rain_scores))
    best_days['minimal_rain'] = daily_results[best_dry_idx]['date']
    
    # –°–∞–º—ã–π —Ç–µ–ø–ª—ã–π –¥–µ–Ω—å
    if all_stats['temperature']:
        warmest_idx = int(np.argmax(all_stats['temperature']))
        best_days['warmest'] = daily_results[warmest_idx]['date']
        coldest_idx = int(np.argmin(all_stats['temperature']))
        best_days['coldest'] = daily_results[coldest_idx]['date']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        'location': {
            'latitude': latitude,
            'longitude': longitude
        },
        'date_range': {
            'start': start_date,
            'end': end_date,
            'duration_days': duration_days
        },
        'aggregated': {
            'probabilities': aggregated_probs,
            'statistics': aggregated_stats,
            'best_days': best_days
        },
        'daily_breakdown': daily_results,
        'metadata': {
            'data_source': source,
            'years_analyzed': f"{years_range[0]}-{years_range[1]}",
            'total_data_points': sum(day['data_points'] for day in daily_results)
        }
    }
    
    # –ü–µ—á–∞—Ç–∞–µ–º summary
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ì–†–ï–ì–ê–¶–ò–ò:")
    print(f"{'='*60}")
    if 'temperature' in aggregated_stats:
        print(f"üå°Ô∏è  –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {aggregated_stats['temperature']['mean']:.1f}¬∞C")
        print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {aggregated_stats['temperature']['min']:.1f}¬∞C ‚Üí {aggregated_stats['temperature']['max']:.1f}¬∞C")
    if 'precipitation' in aggregated_stats:
        print(f"üíß –°—Ä–µ–¥–Ω–∏–µ –æ—Å–∞–¥–∫–∏: {aggregated_stats['precipitation']['mean']:.1f} –º–º/–¥–µ–Ω—å")
        print(f"   –í—Å–µ–≥–æ –∑–∞ –ø–µ—Ä–∏–æ–¥: {aggregated_stats['precipitation']['total']:.1f} –º–º")
    if 'wind' in aggregated_stats:
        print(f"üå¨Ô∏è  –°—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä: {aggregated_stats['wind']['mean']:.1f} –º/—Å")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—ã–≤: {aggregated_stats['wind']['max']:.1f} –º/—Å")
    print(f"\n‚ú® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    for activity, date in best_days.items():
        activity_names = {
            'outdoor_activity': '–õ—É—á—à–∏–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            'minimal_rain': '–ú–∏–Ω–∏–º—É–º –æ—Å–∞–¥–∫–æ–≤',
            'warmest': '–°–∞–º—ã–π —Ç–µ–ø–ª—ã–π',
            'coldest': '–°–∞–º—ã–π —Ö–æ–ª–æ–¥–Ω—ã–π'
        }
        print(f"   ‚Ä¢ {activity_names.get(activity, activity)}: {date}")
    print(f"{'='*60}\n")
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—Ü—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if units:
        result = convert_result_units(result, units)
    
    return result


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
def analyze_multiple_dates(latitude: float,
                          longitude: float, 
                          dates: list,
                          data_source: str = 'nasa') -> list:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞
        longitude: –î–æ–ª–≥–æ—Ç–∞
        dates: –°–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        data_source: –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    """
    results = []
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
    data_service = WeatherDataService(preferred_source=data_source)
    historical_data, source = data_service.get_data(latitude, longitude)
    
    analyzer = StatisticalAnalyzer()
    
    for date in dates:
        day_of_year = date_to_day_of_year(date)
        analysis = analyzer.get_summary_probabilities(historical_data, day_of_year, latitude)
        
        result = {
            'date': date,
            'day_of_year': day_of_year,
            'probabilities': analysis['probabilities'],
            'statistics': analysis['statistics']
        }
        
        results.append(result)
    
    return results


# –≠–∫—Å–ø–æ—Ä—Ç –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    'analyze_weather',
    'analyze_weather_range',
    'analyze_multiple_dates',
    'WeatherDataService',
    'StatisticalAnalyzer',
    'WeatherConfig',
    'date_to_day_of_year',
    'format_probability',
    'get_probability_description'
]
