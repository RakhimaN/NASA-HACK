"""
–ê–¥–∞–ø—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö v2.0
–û–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ API

–ê–¥–∞–ø—Ç–µ—Ä—ã:
    1. GESDISCAdapter - NASA GES DISC (MERRA-2) –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
       ‚Ä¢ AODANA - –æ–ø—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ–ª—â–∏–Ω–∞ –∞—ç—Ä–æ–∑–æ–ª—è
       ‚Ä¢ BCSMASS - —á–µ—Ä–Ω—ã–π —É–≥–ª–µ—Ä–æ–¥ (black carbon)
       ‚Ä¢ DUSMASS - –ø—ã–ª—å (dust)
       
    2. CPTECAdapter - –ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π CPTEC –¥–ª—è –≥—Ä–æ–∑–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
       ‚Ä¢ CAPE - —ç–Ω–µ—Ä–≥–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏ (–≥—Ä–æ–∑—ã, —Ç–æ—Ä–Ω–∞–¥–æ)
       ‚Ä¢ CIN - –∏–Ω–¥–µ–∫—Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏
       
    3. OpenMeteoEnhancedAdapter - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Open-Meteo API
       ‚Ä¢ apparent_temperature - –æ—â—É—â–∞–µ–º–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (wind chill/heat index)
       ‚Ä¢ weathercode - –∫–æ–¥—ã –ø–æ–≥–æ–¥—ã WMO (0-99)
       ‚Ä¢ windgusts - –ø–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞

–í—Å–µ –∞–¥–∞–ø—Ç–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
"""

import requests
import hashlib
import json
import pandas as pd
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import numpy as np


class BaseDataAdapter:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–¥–∞–ø—Ç–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, cache_dir: str = "data/cache"):
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        self.source_name = "base"
    
    def _get_cache_key(self, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞"""
        cache_string = f"{self.source_name}_{json.dumps(kwargs, sort_keys=True)}"
        return hashlib.md5(cache_string.encode()).hexdigest()
    
    def _get_from_cache(self, cache_key: str) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        cache_file = self.cache_dir / f"{cache_key}.parquet"
        
        if cache_file.exists():
            try:
                df = pd.read_parquet(cache_file)
                print(f"‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞: {self.source_name}")
                return df
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: {e}")
                return None
        return None
    
    def _save_to_cache(self, cache_key: str, data: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        cache_file = self.cache_dir / f"{cache_key}.parquet"
        try:
            data.to_parquet(cache_file)
            print(f"‚úì –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à: {self.source_name}")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫—ç—à: {e}")
    
    def fetch_data(self, latitude: float, longitude: float, 
                   start_date: str, end_date: str, 
                   parameters: List[str]) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö)
        
        Args:
            latitude: –®–∏—Ä–æ—Ç–∞
            longitude: –î–æ–ª–≥–æ—Ç–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD)
            parameters: –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            
        Returns:
            DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        raise NotImplementedError("–ú–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")


class GESDISCAdapter(BaseDataAdapter):
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è NASA GES DISC (Global Earth Data –∏ Science Center)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞, –∞—ç—Ä–æ–∑–æ–ª—è—Ö, –æ–∑–æ–Ω–µ
    """
    
    def __init__(self, cache_dir: str = "data/cache"):
        super().__init__(cache_dir)
        self.source_name = "ges_disc"
        self.base_url = "https://goldsmr4.gesdisc.eosdis.nasa.gov/opendap"
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç—ã MERRA-2
        self.dataset_mapping = {
            'AODANA': 'M2T1NXAER',  # Aerosol Optical Depth Analysis
            'BCSMASS': 'M2T1NXAER',  # Black Carbon Surface Mass
            'DUSMASS': 'M2T1NXAER',  # Dust Surface Mass
            'SO2SMASS': 'M2T1NXAER', # SO2 Surface Mass
            'SO4SMASS': 'M2T1NXAER', # SO4 Surface Mass
            'SSSMASS': 'M2T1NXAER',  # Sea Salt Surface Mass
            'TO3': 'M2T1NXCHM',      # Total Ozone
            'TROPO3': 'M2T1NXCHM',   # Tropospheric Ozone
        }
    
    def fetch_data(self, latitude: float, longitude: float,
                   start_date: str, end_date: str,
                   parameters: List[str]) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GES DISC
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: GES DISC —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ NASA Earthdata
        –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ Open-Meteo –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(
            lat=latitude, lon=longitude,
            start=start_date, end=end_date,
            params=parameters
        )
        
        cached_data = self._get_from_cache(cache_key)
        if cached_data is not None:
            return cached_data
        
        print(f"‚ö† GES DISC: –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è NASA Earthdata")
        print(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {parameters}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö
        data = self._generate_mock_air_quality_data(
            latitude, longitude, start_date, end_date, parameters
        )
        
        if data is not None:
            self._save_to_cache(cache_key, data)
        
        return data
    
    def _generate_mock_air_quality_data(self, latitude: float, longitude: float,
                                        start_date: str, end_date: str,
                                        parameters: List[str]) -> pd.DataFrame:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
        –ù–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞
        """
        
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        data = {'date': dates}
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞
        is_urban = abs(latitude) < 60  # –£—Ä–±–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        is_desert = (abs(latitude) < 35) and (abs(longitude) > 30)  # –ü—É—Å—Ç—ã–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
        
        for param in parameters:
            if param == 'AODANA':  # Aerosol Optical Depth
                base = 0.2 if is_urban else 0.1
                if is_desert:
                    base = 0.35
                # –°–µ–∑–æ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
                seasonal = 0.1 * np.sin(2 * np.pi * dates.dayofyear / 365)
                noise = np.random.normal(0, 0.05, len(dates))
                data[param] = np.maximum(0.05, base + seasonal + noise)
            
            elif param == 'BCSMASS':  # Black Carbon (Œºg/m¬≥)
                base = 2.5 if is_urban else 0.5
                seasonal = 0.5 * np.sin(2 * np.pi * dates.dayofyear / 365)
                noise = np.random.normal(0, 0.3, len(dates))
                data[param] = np.maximum(0.1, base + seasonal + noise)
            
            elif param == 'DUSMASS':  # Dust (Œºg/m¬≥)
                base = 50 if is_desert else 10
                if is_urban:
                    base = 20
                # –ü—ã–ª—å –≤—ã—à–µ –≤–µ—Å–Ω–æ–π –∏ –ª–µ—Ç–æ–º
                seasonal = base * 0.5 * np.sin(2 * np.pi * (dates.dayofyear - 80) / 365)
                noise = np.random.normal(0, base * 0.2, len(dates))
                data[param] = np.maximum(1, base + seasonal + noise)
            
            elif param == 'SO2SMASS':  # SO2 (Œºg/m¬≥)
                base = 10 if is_urban else 2
                seasonal = 2 * np.sin(2 * np.pi * dates.dayofyear / 365)
                noise = np.random.normal(0, 1, len(dates))
                data[param] = np.maximum(0.5, base + seasonal + noise)
            
            elif param == 'SO4SMASS':  # Sulfates (Œºg/m¬≥)
                base = 5 if is_urban else 1
                seasonal = 1 * np.sin(2 * np.pi * dates.dayofyear / 365)
                noise = np.random.normal(0, 0.5, len(dates))
                data[param] = np.maximum(0.2, base + seasonal + noise)
            
            elif param == 'SSSMASS':  # Sea Salt (Œºg/m¬≥)
                # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –æ–∫–µ–∞–Ω—É
                distance_to_coast = min(abs(latitude - 0), abs(90 - abs(latitude)))
                base = 15 if distance_to_coast > 20 else 3
                seasonal = 3 * np.sin(2 * np.pi * dates.dayofyear / 365)
                noise = np.random.normal(0, 2, len(dates))
                data[param] = np.maximum(0.5, base + seasonal + noise)
        
        df = pd.DataFrame(data)
        df['source'] = 'GES_DISC_mock'
        
        return df


class CPTECAdapter(BaseDataAdapter):
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Brazilian CPTEC (Centro de Previs√£o de Tempo e Estudos Clim√°ticos)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä–æ–∑–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (CAPE, CIN)
    """
    
    def __init__(self, cache_dir: str = "data/cache"):
        super().__init__(cache_dir)
        self.source_name = "cptec"
        self.base_url = "http://ftp.cptec.inpe.br/modelos"
    
    def fetch_data(self, latitude: float, longitude: float,
                   start_date: str, end_date: str,
                   parameters: List[str]) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CPTEC
        
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: CPTEC API —Å–ª–æ–∂–Ω—ã–π –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –¥–ª—è –Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏
        –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(
            lat=latitude, lon=longitude,
            start=start_date, end=end_date,
            params=parameters
        )
        
        cached_data = self._get_from_cache(cache_key)
        if cached_data is not None:
            return cached_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ª–æ–∫–∞—Ü–∏—è –≤ –Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–µ
        is_south_america = (-60 < latitude < 15) and (-85 < longitude < -30)
        
        if not is_south_america:
            print(f"‚ö† CPTEC: –õ–æ–∫–∞—Ü–∏—è –≤–Ω–µ –∑–æ–Ω—ã –ø–æ–∫—Ä—ã—Ç–∏—è (—Ç–æ–ª—å–∫–æ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞)")
            return None
        
        print(f"üìä CPTEC: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–æ–∑–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        data = self._generate_mock_thunderstorm_data(
            latitude, longitude, start_date, end_date, parameters
        )
        
        if data is not None:
            self._save_to_cache(cache_key, data)
        
        return data
    
    def _generate_mock_thunderstorm_data(self, latitude: float, longitude: float,
                                         start_date: str, end_date: str,
                                         parameters: List[str]) -> pd.DataFrame:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–æ–∑–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        CAPE (Convective Available Potential Energy) - —ç–Ω–µ—Ä–≥–∏—è –∫–æ–Ω–≤–µ–∫—Ü–∏–∏
        """
        
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        data = {'date': dates}
        
        # CAPE –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–∑–æ–Ω–∞ –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        is_tropical = abs(latitude) < 23.5
        
        for param in parameters:
            if param == 'cape':  # CAPE (J/kg)
                # –¢—Ä–æ–ø–∏–∫–∏: –≤—ã—Å–æ–∫–∏–π CAPE –∫—Ä—É–≥–ª—ã–π –≥–æ–¥
                # –£–º–µ—Ä–µ–Ω–Ω—ã–µ —à–∏—Ä–æ—Ç—ã: –≤—ã—Å–æ–∫–∏–π CAPE –ª–µ—Ç–æ–º
                if is_tropical:
                    base = 1500
                    seasonal = 800 * np.sin(2 * np.pi * dates.dayofyear / 365)
                else:
                    base = 800
                    # –ú–∞–∫—Å–∏–º—É–º –ª–µ—Ç–æ–º (–¥–µ–Ω—å –≥–æ–¥–∞ ~180)
                    seasonal = 1200 * np.sin(2 * np.pi * (dates.dayofyear - 80) / 365)
                    seasonal = np.maximum(seasonal, -500)  # –ó–∏–º–æ–π –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ 0
                
                # –°–ª—É—á–∞–π–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ (–≥—Ä–æ–∑–æ–≤—ã–µ –¥–Ω–∏)
                spikes = np.random.choice([0, 1], size=len(dates), p=[0.7, 0.3])
                spike_values = np.random.uniform(500, 2000, len(dates)) * spikes
                
                noise = np.random.normal(0, 200, len(dates))
                data[param] = np.maximum(0, base + seasonal + spike_values + noise)
            
            elif param == 'cin':  # CIN (J/kg) - –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
                # CIN –ø–æ–¥–∞–≤–ª—è–µ—Ç –∫–æ–Ω–≤–µ–∫—Ü–∏—é
                base = -30
                noise = np.random.normal(0, 20, len(dates))
                data[param] = np.minimum(0, base + noise)
            
            elif param == 'lifted_index':  # Lifted Index (¬∞C)
                # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π LI = –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞
                base = -2
                seasonal = -3 * np.sin(2 * np.pi * (dates.dayofyear - 80) / 365)
                noise = np.random.normal(0, 2, len(dates))
                data[param] = base + seasonal + noise
        
        df = pd.DataFrame(data)
        df['source'] = 'CPTEC_mock'
        
        return df


class OpenMeteoEnhancedAdapter(BaseDataAdapter):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è Open-Meteo API
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: apparent_temperature, weathercode, windgusts
    """
    
    def __init__(self, cache_dir: str = "data/cache"):
        super().__init__(cache_dir)
        self.source_name = "openmeteo_enhanced"
        self.base_url = "https://archive-api.open-meteo.com/v1/archive"
    
    def fetch_data(self, latitude: float, longitude: float,
                   start_date: str, end_date: str,
                   parameters: List[str]) -> Optional[pd.DataFrame]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Open-Meteo —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(
            lat=latitude, lon=longitude,
            start=start_date, end=end_date,
            params=parameters
        )
        
        cached_data = self._get_from_cache(cache_key)
        if cached_data is not None:
            return cached_data
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ Open-Meteo –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        param_mapping = {
            'apparent_temperature': 'apparent_temperature_mean',
            'weathercode': 'weathercode',
            'windgusts': 'windgusts_10m_max',
            'temperature': 'temperature_2m_mean',
            'wind_speed': 'windspeed_10m_max',
            'precipitation': 'precipitation_sum',
            'humidity': 'relativehumidity_2m_mean',
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        openmeteo_params = []
        for param in parameters:
            if param in param_mapping:
                openmeteo_params.append(param_mapping[param])
            else:
                openmeteo_params.append(param)
        
        # –ó–∞–ø—Ä–æ—Å –∫ API
        params = {
            'latitude': latitude,
            'longitude': longitude,
            'start_date': start_date,
            'end_date': end_date,
            'daily': ','.join(openmeteo_params),
            'timezone': 'auto'
        }
        
        try:
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫ Open-Meteo API...")
            response = requests.get(self.base_url, params=params, timeout=30)
            response.raise_for_status()
            
            result = response.json()
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            if 'daily' in result:
                daily_data = result['daily']
                df = pd.DataFrame({
                    'date': pd.to_datetime(daily_data['time']),
                })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param in openmeteo_params:
                    if param in daily_data:
                        df[param] = daily_data[param]
                
                df['source'] = 'Open-Meteo'
                
                self._save_to_cache(cache_key, df)
                print(f"‚úì –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Open-Meteo")
                
                return df
            else:
                print(f"‚ö† –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Open-Meteo")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Open-Meteo: {e}")
            return None
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Open-Meteo: {e}")
            return None


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
def get_adapter(source_name: str, cache_dir: str = "data/cache") -> BaseDataAdapter:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        source_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ('ges_disc', 'cptec', 'openmeteo_enhanced')
        cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∞
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –∞–¥–∞–ø—Ç–µ—Ä–∞
    """
    adapters = {
        'ges_disc': GESDISCAdapter,
        'cptec': CPTECAdapter,
        'openmeteo_enhanced': OpenMeteoEnhancedAdapter,
    }
    
    if source_name not in adapters:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫: {source_name}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(adapters.keys())}")
    
    return adapters[source_name](cache_dir)
